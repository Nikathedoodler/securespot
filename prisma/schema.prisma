// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum LockerSize {
  SMALL
  MEDIUM
  LARGE
  XLARGE
}

enum LockerStatus {
  AVAILABLE
  OCCUPIED
  MAINTENANCE
  RESERVED
}

enum UserRole {
  USER
  ADMIN
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  bookings      Booking[]
  payments      Payment[]
  verifyToken   String?
  verifyTokenExpires DateTime?
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())

  @@unique([identifier, token])
}

model Location {
  id        String   @id @default(cuid())
  name      String
  address   String
  city      String
  country   String
  lat       Float
  lng       Float
  lockers   Locker[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Locker {
  id        String       @id @default(cuid())
  size      LockerSize
  status    LockerStatus @default(AVAILABLE)
  location  Location     @relation(fields: [locationId], references: [id])
  locationId String
  bookings  Booking[]
  statusLogs LockerStatusLog[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model Booking {
  id          String   @id @default(cuid())
  startTime   DateTime
  endTime     DateTime
  status      String?  @default("ACTIVE")
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  lockerId    String
  locker      Locker   @relation(fields: [lockerId], references: [id])
  payment     Payment?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model LockerStatusLog {
  id        String       @id @default(cuid())
  locker    Locker      @relation(fields: [lockerId], references: [id])
  lockerId  String
  status    LockerStatus
  createdAt DateTime     @default(now())
}

model Payment {
  id          String   @id @default(cuid())
  amount      Float
  status      String   // PENDING, COMPLETED, FAILED
  bookingId   String   @unique
  booking     Booking  @relation(fields: [bookingId], references: [id])
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}